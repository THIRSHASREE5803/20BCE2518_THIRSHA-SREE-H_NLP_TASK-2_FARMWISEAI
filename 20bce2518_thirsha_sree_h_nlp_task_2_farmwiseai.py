# -*- coding: utf-8 -*-
"""20BCE2518_Thirsha Sree H_NLP_Task 2_FARMWISEAI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ivpdaR_TYLJ5GJAtirfyWJ1snu4WpQaz
"""

pip install pandas

pip install openai langchain faiss-gpu

"""Converted dataset to csv format

"""

import pandas as pd
df = pd.read_csv('/content/Reddit_train.csv')

df

texts = []
for index, row in df.iterrows():
    non_null_values = row.iloc[1:31].dropna().tolist()
    texts.append(non_null_values)

texts

pip install pyqt5==5.12.3 pyqtwebengine==5.12.1

pip install --upgrade spyder==5.2.2

pip install langchain

pip install python-dotenv

pip install -U langchain-openai

from langchain_openai import OpenAIEmbeddings
import os
fake_embeddings = OpenAIEmbeddings(openai_api_key='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')
fake_embeddings_list=[]
for text in texts:
    fake_embeddings_list.append(fake_embeddings.embed_query(str(text)))

fake_embeddings_list

import numpy as np
fake_embeddings_list=np.array(fake_embeddings_list).astype("float32")
fake_embeddings_list

pip install faiss-cpu

"""**This wil give correct post recommendation and post contents of an user is saved with am embedding test_sample.**"""

import faiss
index=faiss.IndexFlatL2(1536)
index.add(fake_embeddings_list)
test_sample=fake_embeddings.embed_query("Can I use my HSA account to pay for medical costs that were incurred prior to my opening of an HSA? I had some medical bills before opening an HSA account, and I'm wondering whether I can pay them back with the money I've put into my HSA.")
test_sample=np.array([test_sample]).astype("float32")
test_sample

k=10
distances,indices=index.search(test_sample,k)

indices

similar_interest=np.array(texts)[indices]
similar_interest

similar_interest.tolist()
similar_interest.dtype

"""**Finding people with same interest**"""

import pandas as pd
df_new = pd.read_csv('/Reddit_train.csv')
df_new

user_list = []
for index, row in df_new.iterrows():
    username = row['Username']
    for col in df_new.columns[1:]:
        if pd.notna(row[col]) and row[col] in str(similar_interest):
            user_info = {'Username': username}
            user_list.append(user_info)
unique_user_list = []
for user_info in user_list:
    if user_info not in unique_user_list:
        unique_user_list.append(user_info)

for user_info in unique_user_list:
    print(user_info)